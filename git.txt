https://www.liaoxuefeng.com/wiki/896043488029600/897271968352576  --git学习

git config  --global user.info (global全局设置)  设置git信息


ls    查看仓库文件

git status ； 查看仓库状态

git add <file>;	添加到仓库

git commit -m "description"  提交

git diff   （git diff HEAD -- <file> 和提交的版本比对）查看修改内容

git log       (--pretty==oneline) 查看提交记录

git reset -hard #id(退回到指定id版本)  HEAD^ （HEAD~num）  ;回退版本 ^代表一个提交的版本 

git reflog ；查看命令记录


.git文件 版本库  --stage(暂存区）master(分支) HEAD分支的指针

git add 提交到暂存区 git commit 上传到分支


git checkout -- <file> 撤销修改

git reset HEAD <file> 撤销暂存区的文件


---------远程仓库------

$ ssh-keygen -t rsa -C "youremail@example.com"  --创建ssh key


git remote add origin git@github.com:github_username/reposity_name.git   远程关联仓库

git remote remove origin  -- 取消远程关联


git push orgin master ;(由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来)
git 推送本地至远程仓库


git clone 克隆远程仓库


------创建分支------

git checkout -b <branchname> ；创建并切换到分支

git switch -c <branchname> ; 创建并切换分支相比于checkout 更易理解因为 checkout 一般用作撤销

-b (相当于两条命令 git barnch <branchname>; 创建分支 git checkout <branchname> 切换分支 git switch<branchname>)

git branch ；查看当前分支

git merge ; 合并分支

git branch -d <branchname> ;删除分支  至少要有一条分支 否者会删除失败

git log --graph 查看分支合并图

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并


bug 处理

git stash ；储存当前任务

git stash list 查看现场

工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了

git cherry-pick <branchid>  合并指定的分支

git branch -D <branchname> 强行删除分支 ：主要是删除强行删除未合并的分支

git rebase ;基变 rebase操作可以把本地未push的分叉提交历史整理成直线；